name: Calculate Next Semantic Version

on:
  workflow_dispatch:  # This triggers the action manually

jobs:
  calculate_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set initial version
        run: echo "v1.2.1" > VERSION

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          echo "::set-output name=latest_tag::$LATEST_TAG"

      - name: Get commits since latest tag
        id: get_commits
        run: |
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
          echo "$COMMITS"
          echo "::set-output name=commits::$COMMITS"

      - name: Determine next version based on conventional commits
        id: calculate_version
        run: |
          LATEST_VERSION=${{ steps.get_latest_tag.outputs.latest_tag }}
          COMMITS=${{ steps.get_commits.outputs.commits }}
          
          # Extract version numbers
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3)

          # Determine the type of version bump based on conventional commits
          if echo "$COMMITS" | grep -q '^feat'; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif echo "$COMMITS" | grep -q '^fix'; then
            PATCH=$((PATCH+1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "Next version: $NEW_VERSION"
          echo "::set-output name=next_version::$NEW_VERSION"

      - name: Output new version
        run: echo "New calculated version is ${{ steps.calculate_version.outputs.next_version }}"

      - name: Tag the new version
        run: |
          git tag -a ${{ steps.calculate_version.outputs.next_version }} -m "Release ${{ steps.calculate_version.outputs.next_version }}"
          git push origin ${{ steps.calculate_version.outputs.next_version }}
